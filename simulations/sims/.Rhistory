mutate(dis = 20:1) %>%
select(-probability, everything())
adv
install.packages("xtable")
library(xtable)
xtable(prob)
probs <- data.frame(roll1 = 1:20, p = 1)
probs2 <- probs
names(probs2) <- c("roll2", "p")
prob <- full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = n()/nrow(prob)) %>%
mutate(dis = 20:1) %>%
select(-probability, everything())
?xtable
library(printr)
kable(prob)
print(xtable(prob), type = "html")
library(knitr)
kable(prob)
prob <- full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = 100*n()/nrow(prob)) %>%
mutate(dis = 20:1) %>%
select(-probability, everything())
kable(prob)
prob <- full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = 100*n()/nrow(prob)) %>%
mutate(dis = 20:1) %>%
select(-probability, everything())
kable(prob)
prob <- full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = n() * 100/nrow(prob)) %>%
mutate(dis = 20:1) %>%
select(-probability, everything())
kable(prob)
prob <- full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = n() * 100/nrow(prob))
prob
prob <- full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = n()/nrow(prob)) %>%
mutate(dis = 20:1) %>%
select(-probability, everything())
prob
prob <- full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv)
prob
nrow(prob)
prob <- full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = n()/nrow(probs)/nrow(probs2)) %>%
mutate(dis = 20:1) %>%
select(-probability, everything()) %>%
kable
full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = n()/nrow(probs)/nrow(probs2)) %>%
mutate(dis = 20:1) %>%
select(-probability, everything()) %>%
kable
full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = 100*n()/nrow(probs)/nrow(probs2)) %>%
mutate(dis = 20:1) %>%
select(-probability, everything()) %>%
kable
full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = 100*n()/nrow(probs)/nrow(probs2)) %>%
mutate(dis = 20:1, probability = paste0(probability,"%")) %>%
select(-probability, everything()) %>%
kable
library(ggplot2)
pr <- full_join(probs,probs2) %>%
mutate(adv = pmax(roll1, roll2), dis = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = 100*n()/nrow(probs)/nrow(probs2)) %>%
mutate(dis = 20:1, probability = paste0(probability,"%")) %>%
select(-probability, everything())
ggplot(pr) +
geom_bar(aes(adv, probability))
ggplot(pr) +
geom_bar(aes(adv, probability), stat="identity")
pr %>% gather(roll, probability, roll1, roll2)
library(tidyr)
pr %>% gather(roll, probability, roll1, roll2)
?gather
pr %>% gather(roll, probability, -probability)
pr
pr %>% gather(TypeOfRoll, roll, -probability) %>% rbind(data.frame(probability = "5%", TypeOfRoll = "Normal", roll = 1:20))
pr %>% gather(TypeOfRoll, roll, -probability) %>%
rbind(data.frame(probability = "5%", TypeOfRoll = "Normal", roll = 1:20)) %>%
ggplot() +
geom_bar(aes(adv, probability), stat="identity") +
facet_wrap(TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
rbind(data.frame(probability = "5%", TypeOfRoll = "Normal", roll = 1:20)) %>%
ggplot() +
geom_bar(aes(adv, probability), stat="identity") +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
rbind(data.frame(probability = "5%", TypeOfRoll = "Normal", roll = 1:20)) %>%
ggplot() +
geom_bar(aes(adv, probability), stat="identity")
pr %>% gather(TypeOfRoll, roll, -probability) %>%
rbind(data.frame(probability = "5%", TypeOfRoll = "Normal", Roll = 1:20)) %>%
ggplot() +
geom_bar(aes(Roll, probability), stat="identity") +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
rbind(data.frame(probability = "5%", TypeOfRoll = "Normal", Roll = 1:20)) %>%
ggplot() +
geom_bar(aes(Roll, probability), stat="identity")
pr %>% gather(TypeOfRoll, roll, -probability) %>%
rbind(data.frame(probability = "5%", TypeOfRoll = "Normal", Roll = 1:20))
pr %>% gather(TypeOfRoll, roll, -probability) %>%
rbind(data.frame(probability = "5%", TypeOfRoll = "Normal", roll = 1:20))
pr %>% gather(TypeOfRoll, roll, -probability) %>%
rbind(data.frame(probability = "5%", TypeOfRoll = "Normal", roll = 1:20)) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
facet_wrap(~TypeOfRoll)
?geom_abline
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_abline(intercept = "0.5%")
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_abline(intercept = "0.5%")
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_abline(intercept = "0.5%") +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_abline(intercept = "5%") +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_abline(intercept = 5) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 5) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
facet_wrap(~TypeOfRoll)
?geom_text
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll)
pr <- full_join(probs,probs2) %>%
mutate(RollWithAdvantage = pmax(roll1, roll2), RollWithDisadvantage = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = 100*n()/nrow(probs)/nrow(probs2)) %>%
mutate(dis = 20:1, probability = paste0(probability,"%")) %>%
select(-probability, everything())
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll)
pr <- full_join(probs,probs2) %>%
mutate(RollWithAdvantage = pmax(roll1, roll2), RollWithDisadvantage = pmin(roll1, roll2)) %>%
group_by(RollWithAdvantage) %>%
summarise(probability = 100*n()/nrow(probs)/nrow(probs2)) %>%
mutate(dis = 20:1, probability = paste0(probability,"%")) %>%
select(-probability, everything())
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll)
pr <- full_join(probs,probs2) %>%
mutate(RollWithAdvantage = pmax(roll1, roll2), RollWithDisadvantage = pmin(roll1, roll2)) %>%
group_by(RollWithAdvantage) %>%
summarise(probability = 100*n()/nrow(probs)/nrow(probs2)) %>%
mutate(RollWithDisadvantage = 20:1, probability = paste0(probability,"%")) %>%
select(-probability, everything())
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll) +
scale_x_discrete(breaks = 1:20)
?grep
?[[:digit:]]
x <- letters
x
test <- data.frame(x=1:5, y=5:10, z=letters[1,2,1,2,1])
test <- data.frame(x=1:5, y=5:10, z=letters[c(1,2,1,2,1)])
test <- data.frame(x=1:5, y=5:10, z=letters[c(1,2)])
test <- data.frame(x=1:5, y=5:10, z=letters[1:2])
test <- data.frame(x=1:5, y=6:10, z=letters[c(1,2,1,2,1)])
test
ggplot(test) + geom_point(aes(x,y)) + facet_wrap(z)
library(ggplot2)
ggplot(test) + geom_point(aes(x,y)) + facet_wrap(z)
ggplot(test) + geom_point(aes(x,y)) + facet_wrap(~z)
sum(a <- 1, b <- 2)
sum(a <- 1, b <- 2, c <- 3)
function(x <- 1) {}
function(x = 1) {x <<- x}
foo <- function(x = 1) {x <<- x}
foo
foo()
foo()
foo(2)
foo(3)
foo(4)
?'<-
''
?'<-'
foo <- function() {count = 0 function() count <<- count + 1}
foo <- function() {count = 0; function() count <<- count + 1}
foo()
foo <- function() {count = 0; function() {count <<- count + 1; count}}
counter1 <- foo()
counter1
counter1
foo <- function() {
i <- 0
function() {
i <<- i + 1
i
}
}
counter1 <- foo()
counter1
counter1
counter1()
counter1()
counter1()
counter1()
bar <- function() {
i <- 0
function() {
i <- i + 1
i
}
}
counter2 <- bar()
counter2()
counter2()
counter2()
counter2()
bar
counter1
counter2
x <- 3
f <- function() {f2 <- function() {print(x)}; f2()}
f()
g <- function() {g2 <- function() {print(x)}; x<-7; g2()}
g()
h2 <- function() print(x)
h <- function() {x <- 7; h2}
h()
h <- function() {x <- 7; h2()}
h()
y<-100
foo <- function() { y<- 10; g <- function(x) x+y; return(g)}
bar <- foo()
bar
bar(3)
environment(bar)
ls(environment(bar))
environment(bar)$g
ls(environment(bar)$g)
ls(environment(environment(bar)$g))
environment(environment(bar)$g)$g
environment(environment(bar)$g)$y
(environment(bar)$g)
environment(foo)
environment(foo)$foo
?environment
ls(environment(foo))
?.Random.seed
.Random.seed
set.seed(1337)
.Random.seed
rnorm(1)
rnorm(1)
set.seed(1337)
rnorm(1)
search()
searchpaths()
?'<<-'
library(RANN)
library(Rcpp)
sourceCpp('CalcEuclideanDist.cpp')
test <- data.frame(W = sample(0:1, 100000, replace = T),
X1 = rnorm(100000),
X2 = rnorm(100000),
X3 = sample(letters[1:5], 100000, replace = T))
cc <- sapply(test, is.character)
test[cc] <- lapply(test[cc], factor)
t.terms <- terms(W ~ X1 + X2 + X3)
attr(t.terms, "intercept") <- 0
t.mf <- model.frame(t.terms, test)
t.W <- model.response(t.mf)
t.X <- model.matrix(t.terms, data = t.mf)
foo <- nn2(t.X[t.W == 0,], t.X[t.W==1,])
foo
foo <- nn2(t.X[t.W == 0,], t.X[t.W==1,], k = 1)
foo
foo <- nn2(t.X[t.W == 0,], t.X[t.W==1,], k = 1)$nn.indx
foo
foo <- nn2(t.X[t.W == 0,], t.X[t.W==1,], k = 1)$nn.idx
foo
nrow(t.X)
summary(foo[,1])
nrow(t.X[t.W==0])
nrow(t.X[t.W==0,])
nrow(t.X[t.W==1,])
which[foo == 49600]
which(foo == 49600)
which(foo[,1] == 49600)
fpp
foo
max(foo[,1])
summary(foo[,1])
?order
order(t.X)
order(t.mf)
head(sort(t.mf))
?nn2
?sort
sort.data.frame
?data.frame.sort
t.mf[order(W),]
t.mf[order(t.mf$W),]
t.W1 <- t.W == 1
t.W1
t.W1[t.W1]
which(t.W1)
which(!t.W1)[]
foo <- nn2(t.X[!t.W1,], t.X[t.W1,], k = 1)$nn.idx
foo <- nn2(t.X[!t.W1,], t.X[t.W1,], k = 1)$nn.idx[,1]
foo
length(foo)
length(which(t.W1))
matches <- data.frame(W1 = which(t.W1), W0 = foo)
matches
matches <- data.frame(W1 = which(t.W1), W0 = which(!t.W1)[foo])
matches
head(data.frame(W1 = which(t.W1), W0 = which(!t.W1)[foo]))
head(data.frame(W1 = which(t.W1), W0 = foo))
?model.response
library(parallel)
library(rlecuyer)
# Load the functions
path.to.functions <- "../functions/"
invisible(sapply(list.files(path.to.functions), source))
# parameters to tweak
n.sam <- 100
alpha <- 2
tau <- 5
n.sim <- 600
# Parallel Backend Setup
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP",
"nn2", # nn2 from RANN package
"n.sam",
"alpha",
"tau"
)
)
# Simulation Call
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
# Free up resources on your computer again
stopCluster(cl)
setwd("D:/coursework/stat239b/stab239b-presentation/simulations")
setwd("D:/coursework/stat239b/stab239b-presentation/simulation")
setwd("D:/coursework/stat239b/stab239b-presentation/")
setwd("D:/coursework/stat239b/")
list.files()
setwd("./stat239b-presentation")
list.files()
?mapply
?Map
# Load the functions
path.to.functions <- "../functions/"
invisible(sapply(list.files(path.to.functions), source))
# parameters to tweak
n.sam <- 100
alpha <- 2
tau <- 5
n.sim <- 600
# Parallel Backend Setup
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP",
"nn2", # nn2 from RANN package
"n.sam",
"alpha",
"tau"
)
)
sapply(list.files(path.to.functions), source)
setwd("./stat239b-presentation/sims")
setwd("./sims")
getwd()
setwd("simulations/sims/")
path.to.functions <- "../functions/"
invisible(sapply(list.files(path.to.functions), source))
# parameters to tweak
n.sam <- 100
alpha <- 2
tau <- 5
n.sim <- 600
# Parallel Backend Setup
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP",
"nn2", # nn2 from RANN package
"n.sam",
"alpha",
"tau"
)
)
list.files
list.files()
list.files("../functions")
path.to.functions <- "../functions/"
invisible(sapply(list.files(path.to.functions), source))
path.to.functions
list.files(path.to.functions)
sapply(list.files(path.to.functions), source)
getwd()
library(parallel)
library(rlecuyer)
# Load the functions
path.to.functions <- "../functions/"
invisible(sapply(list.files(path.to.functions), source))
source("../functions/BootFindMatch.R")
source("D:/coursework/stat239b/stat239b-presentations/simulations/functions/BootFindMatch.R")
