facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_abline(intercept = 5) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 5) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
facet_wrap(~TypeOfRoll)
?geom_text
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll)
pr <- full_join(probs,probs2) %>%
mutate(RollWithAdvantage = pmax(roll1, roll2), RollWithDisadvantage = pmin(roll1, roll2)) %>%
group_by(adv) %>%
summarise(probability = 100*n()/nrow(probs)/nrow(probs2)) %>%
mutate(dis = 20:1, probability = paste0(probability,"%")) %>%
select(-probability, everything())
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll)
pr <- full_join(probs,probs2) %>%
mutate(RollWithAdvantage = pmax(roll1, roll2), RollWithDisadvantage = pmin(roll1, roll2)) %>%
group_by(RollWithAdvantage) %>%
summarise(probability = 100*n()/nrow(probs)/nrow(probs2)) %>%
mutate(dis = 20:1, probability = paste0(probability,"%")) %>%
select(-probability, everything())
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll)
pr <- full_join(probs,probs2) %>%
mutate(RollWithAdvantage = pmax(roll1, roll2), RollWithDisadvantage = pmin(roll1, roll2)) %>%
group_by(RollWithAdvantage) %>%
summarise(probability = 100*n()/nrow(probs)/nrow(probs2)) %>%
mutate(RollWithDisadvantage = 20:1, probability = paste0(probability,"%")) %>%
select(-probability, everything())
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll)
pr %>% gather(TypeOfRoll, roll, -probability) %>%
ggplot() +
geom_bar(aes(roll, probability), stat="identity") +
geom_hline(yintercept = 10.5, color = "red") +
geom_label(aes(x = 3, y = 10.5, label = "normal roll")) +
facet_wrap(~TypeOfRoll) +
scale_x_discrete(breaks = 1:20)
?grep
?[[:digit:]]
x <- letters
x
test <- data.frame(x=1:5, y=5:10, z=letters[1,2,1,2,1])
test <- data.frame(x=1:5, y=5:10, z=letters[c(1,2,1,2,1)])
test <- data.frame(x=1:5, y=5:10, z=letters[c(1,2)])
test <- data.frame(x=1:5, y=5:10, z=letters[1:2])
test <- data.frame(x=1:5, y=6:10, z=letters[c(1,2,1,2,1)])
test
ggplot(test) + geom_point(aes(x,y)) + facet_wrap(z)
library(ggplot2)
ggplot(test) + geom_point(aes(x,y)) + facet_wrap(z)
ggplot(test) + geom_point(aes(x,y)) + facet_wrap(~z)
sum(a <- 1, b <- 2)
sum(a <- 1, b <- 2, c <- 3)
function(x <- 1) {}
function(x = 1) {x <<- x}
foo <- function(x = 1) {x <<- x}
foo
foo()
foo()
foo(2)
foo(3)
foo(4)
?'<-
''
?'<-'
foo <- function() {count = 0 function() count <<- count + 1}
foo <- function() {count = 0; function() count <<- count + 1}
foo()
foo <- function() {count = 0; function() {count <<- count + 1; count}}
counter1 <- foo()
counter1
counter1
foo <- function() {
i <- 0
function() {
i <<- i + 1
i
}
}
counter1 <- foo()
counter1
counter1
counter1()
counter1()
counter1()
counter1()
bar <- function() {
i <- 0
function() {
i <- i + 1
i
}
}
counter2 <- bar()
counter2()
counter2()
counter2()
counter2()
bar
counter1
counter2
x <- 3
f <- function() {f2 <- function() {print(x)}; f2()}
f()
g <- function() {g2 <- function() {print(x)}; x<-7; g2()}
g()
h2 <- function() print(x)
h <- function() {x <- 7; h2}
h()
h <- function() {x <- 7; h2()}
h()
y<-100
foo <- function() { y<- 10; g <- function(x) x+y; return(g)}
bar <- foo()
bar
bar(3)
environment(bar)
ls(environment(bar))
environment(bar)$g
ls(environment(bar)$g)
ls(environment(environment(bar)$g))
environment(environment(bar)$g)$g
environment(environment(bar)$g)$y
(environment(bar)$g)
environment(foo)
environment(foo)$foo
?environment
ls(environment(foo))
?.Random.seed
.Random.seed
set.seed(1337)
.Random.seed
rnorm(1)
rnorm(1)
set.seed(1337)
rnorm(1)
search()
searchpaths()
?'<<-'
install.packages("Matchit")
install.packages("MatchIt")
library(MatchIt)
MatchIt
matchit
?distance2logit
?match.call
match.call
?terms
terms(x~y)
?distance2mahalanobis
exis)
exists(distance2mahalanobis)
?match
?stop
test <- data.frame(x = 1:5, y = 6:10)
dim(test)
dim(test)[2]
ncol(test)
nocol
ncol
?model.matrix
?try
?model.frame
model.frame(x~y)
test <- (W = sample(0:1, 10, r = T), X1 = rnorm(10), X2 = rnorm(10))
test <- data.frame(W = sample(0:1, 10, r = T), X1 = rnorm(10), X2 = rnorm(10))
model.frame(terms(W~X1+X2), test)
?model.frame
mftest <- model.frame(terms(W~X1+X2), test)
model.response(mftest)
tttest <- terms(W~X1+X2)
tttest
attr(tttest, "intercept") <- 0
ttest
tttest
test$X3 = a:e
test$X3 = letters[1:5]
test
apply(test, 2, function(x) ifelse(is.character(x), as.factor(x), x))
?vapply
lapply(test, function(x) ifelse(is.character(x), as.factor(x), x))
is.character(test$X1)
as.factor(test$X1)
lapply(test, function(x) if (is.character(x)) as.factor(x))
lapply(test, function(x) {if (is.character(x)) as.factor(x)})
lapply(test, function(x) {if (is.character(x)) as.factor(x)} x)
lapply(test, function(x) {if (is.character(x)) as.factor(x) else x} )
is.character(test)
is.character(test$X1)
?is.character
lapply(test[!is.character], as.factor)
lapply(test[!is.character(test)], as.factor)
test[] <- lapply(test[!is.character(test)], as.factor)
test
?subset
!is.data.frame(NULL)
mftest
model.response(mftest)
model.matrix(tttest, data = mftest)
test[!is.character(test)]
test <- data.frame(W = sample(0:1, 10, r = T), X1 = rnorm(10), X2 = rnorm(10), X3 = letters[1:5])
test[!is.character(test)]
test
str(test)
test[!is.character(test)]
test <- data.frame(W = sample(0:1, 10, r = T), X1 = rnorm(10), X2 = rnorm(10), X3 = as.character(letters[1:5])
)
test
str(test)
test[!is.character(test)]
?test
?data.frame
test <- data.frame(W = sample(0:1, 10, r = T), X1 = rnorm(10), X2 = rnorm(10), X3 = as.character(letters[1:5], strings = F)
)
str(test)
with(test, as.factor(X3))
test$X3 <- with(test, as.factor(X3))
test$X3 <- with(test, as.character(X3))
str(test)
test[!is.character(test)]
str(test)
test[] <- lapply(test[!is.character(test)], as.factor)
str(test)
is.character(test)
test <- data.frame(W = sample(0:1, 10, r = T), X1 = rnorm(10), X2 = rnorm(10), X3 = as.character(letters[1:5], stringsAsFactors = F))
test
str(test)
test <- data.frame(W = sample(0:1, 10, r = T), X1 = rnorm(10), X2 = rnorm(10), X3 = c("a", "b", "c", "d", "e"), stringsAsFactors = F))
test <- data.frame(W = sample(0:1, 10, r = T), X1 = rnorm(10), X2 = rnorm(10), X3 = c("a", "b", "c", "d", "e"), stringsAsFactors = F)
str(test)
test[] <- lapply(test[!is.character(test)], as.factor)
str(test)
class(test$X1)
test <- data.frame(W = sample(0:1, 10, r = T),
X1 = rnorm(10),
X2 = rnorm(10),
X3 = c("a", "b", "c", "d", "e"),
stringsAsFactors = F)
test <- data.frame(test, stringsAsFactors = T)
test
str(test)
test <- data.frame(test, stringsAsFactors = TRUE)
str(test)
test[] <- lapply(test[sapply(test, is.character)], as.factor)
str(test)
test <- data.frame(W = sample(0:1, 10, r = T),
X1 = rnorm(10),
X2 = rnorm(10),
X3 = c("a", "b", "c", "d", "e"),
stringsAsFactors = F)
sapply(test, is.character)
ic <- sapply(test, is.character)
test[] <- lapply(test[ic], as.factor)
test
test <- data.frame(W = sample(0:1, 10, r = T),
X1 = rnorm(10),
X2 = rnorm(10),
X3 = c("a", "b", "c", "d", "e"),
stringsAsFactors = F)
ic <- sapply(test, is.character)
test[] <- lapply(test[ic], factor)
test
test <- data.frame(W = sample(0:1, 10, r = T),
X1 = rnorm(10),
X2 = rnorm(10),
X3 = c("a", "b", "c", "d", "e"),
stringsAsFactors = F)
ic <- sapply(test, is.character)
test[ic] <- lapply(test[ic], factor)
test
str(test)
test
matchit(test)
?matchit
matchit(W ~ X1 + X2 + X3, test)
names(matchit(W ~ X1 + X2 + X3, test))
matchit(W ~ X1 + X2 + X3, test)$X
tttest
tttest <- terms(W ~ X1 + X2 + X3)
attr(tttest, "intercept") <- 0
mftest <- model.frame(tttest, data)
mftest <- model.frame(tttest, test)
mftest
str(test)
test
Xtest <- model.matrix(tttest, data = mftest)
Xtest
?model.matrix
matchit(W ~ X1 + X2 + X3, test, distance = "mahalanobis")
matchit(W ~ X1 + X2, test, distance = "mahalanobis")
matchit(W ~ X1 + X2, test, distance = "mahalanobis")$distance
matchit(W ~ X1 + X2, test, distance = "mahalanobis")$match.matrix
test
test$X1[1] <- 0
test
test$X2[1] <- 0
test <- data.frame(W = sample(0:1, 10, r = T),
X1 = rnorm(10),
X2 = rnorm(10),
X3 = c("a", "b", "c", "d", "e"),
stringsAsFactors = T)
test
test$X1[1] <- 0
test$X2[2] <- 0
test
test$X1[2] <- test$X2[1]
test
matchit(W ~ X1 + X2, test, distance = "mahalanobis")$match.matrix
test$W[1] <- 0
matchit(W ~ X1 + X2, test, distance = "mahalanobis")$match.matrix
matchit(W ~ X1 + X2, test, distance = "mahalanobis", method = "optimal")$match.matrix
install.packages("optmatch")
install.packages("optmatch")
matchit(W ~ X1 + X2, test, distance = "mahalanobis", method = "full")$match.matrix
install.packages("optmatch")
install.packages("abind")
install.packages("optmatch")
matchit(W ~ X1 + X2, test, distance = "mahalanobis", method = "full")$match.matrix
matchit(W ~ X1 + X2, test, distance = "mahalanobis", method = "full")
matchit(W ~ X1 + X2, test, distance = "mahalanobis", method = "full")$distance
matchit(W ~ X1 + X2, test, distance = "mahalanobis", method = "optimal")$distance
matchit(W ~ X1 + X2, test, distance = "mahalanobis", method = "optimal")
matchit(W ~ X1 + X2, test, method = "optimal")
?dist
model.matrix
Xtest <- model.matrix(tttest, data = mftest)
Xtest
dist(Xtest)
dimnames(dist(Xtest))
names(dist(Xtest))
rownames(dist(Xtest))
colrownames(dist(Xtest))
colnames(dist(Xtest))
dist(Xtest)[2,1]
class(dist(Xtest))
dtest <- dist(Xtest)
dtest <- dist(Xtest, diag = TRUE)
dtest
dtest <- as.matrix(dist(Xtest, diag = TRUE))
dtest
dtest <- dist(Xtest, diag = TRUE)
dist
install.packages("dist2")
getwd()
setwd("D:/coursework/stat239b")
list.files()
setwd("D:/coursework/stat239b/stat239b-presentation")
list.files()
setwd("D:/coursework/stat239b/stat239b-presentation/simulations")
setwd("D:/coursework/stat239b/stat239b-presentation/simulations/functions")
sourceCpp('CalcPDist.cpp')
library(Rcpp)
sourceCpp('CalcPDist.cpp')
test
test[W==0]
CalcPDist(test[test$W==0], test[test$W==1])
CalcPDist(test[test$W==0,], test[test$W==1,])
CalcPDist(as.matrix(test[test$W==0,]), as.matrix(test[test$W==1,]))
as.matrix(test[test$W==0,])
CalcPDist(as.matrix(test[test$W==0,-X3]), as.matrix(test[test$W==1,-X3]))
CalcPDist(as.matrix(test[test$W==0,-c("X3")]), as.matrix(test[test$W==1,-c("X3")]))
CalcPDist(as.matrix(test[test$W==0,c("X1", "X2")]), as.matrix(test[test$W==1,c("X1", "X2")]))
?wrap
?is.character
do.call("CalcPDist", list(as.matrix(test[test$W==0,c("X1", "X2")]), as.matrix(test[test$W==1,c("X1", "X2")])))
X
Xtest
test2 <- test1[-X3]
test2 <- test[-X3]
test
test2 <- test[-3]
test2 <- test[-4]
test2
do.call("CalcPDist", list(as.matrix(test2[test2$W==0,c("X1", "X2")]), as.matrix(test2[test2$W==1,c("X1", "X2")])))
rownames(test2)
rownames(test2[test2$W == 0])
rownames(test2[test2$W == 0,])
test2[test2$W == 0,]
-0.47128155^2
sqrt((-0.47128155)^2 + (-0.47128155)^2)
Xtest2
Xtest
mftest
str(mftest)
tttest
?`~`
?terms
labels(tttest)
Xtest
?model.frame
mftest
names(mftest)
str(mftest)
treat
treattest
treattest <- model.response(mftest)
treattest
treattest==0
mftest[treattest == 0]
mftest[treattest == 0,]
Xtest[treattest == 0,]
CalcEuclideanDist(Xtest[treattest == 0,], Xtest[treattest == 1,])
sourceCpp('CalcEuclideanDist.cpp')
View(CalcPDist)
sourceCpp('CalcEuclideanDist.cpp')
CalcEuclideanDist(Xtest[treattest == 0,], Xtest[treattest == 1,])
names(treattest == 0)
treattest == 0
names(X[treattest == 0,])
names(Xtest[treattest == 0,])
rownames(Xtest[treattest == 0,])
dtest <- CalcEuclideanDist(Xtest[treattest == 0,], Xtest[treattest == 1,])
dtest
names(treattest)
names(treattest[treattest == 1])
treattest
names(treattest)[treattest]
names(treattest[treattest])
names(treattest)[treattest == 1]
dimnames
which(treat ==1)
which(treattest ==1)
which(treattest == 1)
which(treattest)
treattest
dtest
dimnames(dtest)
rownames(dtest) <- letters[1:6]
dtest
colnames(dtest)
?dimnames
dimnames(dtest) <- list(names(which(treat==0)), names(which(treat==1)))
dimnames(dtest) <- list(names(which(treattest==0)), names(which(treattest==1)))
dtest
dimnames(dtest) <- list(which(treattest==0), which(treattest==1))
dimnames
dtest
?subset
subset(treattest, ==0)
?which
list(which(treattest==0), which(treattest==1)
)
lapply(0:1, function(x) which(treattest == x))
dtest
apply(dtest, 1, which.min)
apply(dtest, 2, which.min)
apply(dtest, 2, function(x) which(x == min(x)))
apply(diag(5), 2, function(x) which(x == min(x)))
lapply(diag(5), function(x) which(x == min(x)))
apply(diag(5), 2, function(x) which(x == min(x)))
lapply(as.list(diag(5)), 2, function(x) which(x == min(x)))
lapply(as.list(diag(5)), function(x) which(x == min(x)))
lapply(as.data.frame(diag(5)), function(x) which(x == min(x)))
apply(dtest, 2, function(x) which(x == min(x)))
?apply
?upper
apply(upper.tri(5, diag = T), 2, function(x) which(x == min(x)))
upper.tri(5, diag = T)
upper.tri(diag(5), diag = T)
apply(upper.tri(Xtest, diag = T), 2, function(x) which(x == min(x)))
apply(upper.tri(Xtest, diag = T), 2, function(x) which(x == min(x)), simplify = F)
?apply
apply
lapply
lapply(colnames(dtest), function(x) which(x == min(x)))
lapply(colnames(dtest), function(x) which(dtest[,x] == min(dtest[,x])))
dtest
?which
lapply(colnames(dtest), function(x) names(which(dtest[,x] == min(dtest[,x]))))
dtest
lapply(colnames(dtest), function(x) setNames(names(which(dtest[,x] == min(dtest[,x]))), x))
lapply(colnames(dtest), function(x) names(which(dtest[,x] == min(dtest[,x]))), USE.NAMES = TRUE)
lapply(setNames(colnames(dtest), colnames(dtest)), function(x) names(which(dtest[,x] == min(dtest[,x]))))
