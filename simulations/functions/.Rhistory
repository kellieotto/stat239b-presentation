names(simulation)
str(simulation)
simulation[1]
simulation[2]
sim2 <- as.matrix(simulation)
sim2[1,]
sim2[[1]]
str(sim2)
str(diag(5))
matrix(do.call(c, sim2), nrow = 3)
sim2 <- matrix(do.call(c, sim2), nrow = 3)
sim2
apply(sim2, 1, var)
simulation
apply(sim2, 1, var)
mean(sim2[3,])
simulation
class(simulation)
simulation[1]
str(simulation)
?dim
str(diag(2))
dim(diag(2))
dim(simulation)
simulation[1,]
?parSapply
parSapply
simplify2array
simulation
simulation[1,1]
simulation[2,1]
parReplicate <- function(cl, n, expr, simplify = "array") {
parLapply(cl, integer(n),
eval.parent(substitute(function(...) expr)),
simplify = simplify)
}
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 100 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 600 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
stopCluster(cl)
simulation
lapply(simulation, rbind)
lapply(simulation, cbind)
lapply(simulation, rbind)
do.call(cbind, lapply(simulation, rbind))
do.call(rbind, lapply(simulation, rbind))
parReplicate <- function(cl, n, expr, simplify = T) {
ans <- parLapply(cl, integer(n),
eval.parent(substitute(function(...) expr)))
if (simplify) do.call(answer, lapply(simulation, rbind))
else answer
}
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 100 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 600 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 100 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 600 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
stopCluster(cl)
parReplicate <- function(cl, n, expr, simplify = T) {
ans <- parLapply(cl, integer(n),
eval.parent(substitute(function(...) expr)))
if (simplify) do.call(rbind, lapply(ans, rbind))
else answer
}
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 100 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 600 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
# Free up resources on your computer again
stopCluster(cl)
simulation
simulation[1,]
simulation[2,]
simulation[,1]
do.call(rbind, lapply(simulation, rbind))
simulation[,1]
dimnames(simulation)
simulation[[2]]
simulation[,1]
unlist(simulation[,1])
parReplicate <- function(cl, n, expr, simplify = "array") {
parSapply(cl, integer(n),
eval.parent(substitute(function(...) expr)),
simplify = simplify)
}
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 100 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 60 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
# Free up resources on your computer again
stopCluster(cl)
simulation
simulation[1,]
simulation$tau.hat
simulation[1,]
simulation[,1]
parReplicate <- function(cl, n, expr, simplify = T) {
ans <- parLapply(cl, integer(n),
eval.parent(substitute(function(...) expr)))
if (simplify) do.call(rbind, lapply(ans, rbind))
else ans
}
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 100 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 60 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau), simplify = F)
# Free up resources on your computer again
stopCluster(cl)
simulation
unlist(simulation)
class(unlist(simulation))
matrix(unlist(simulation), ncol = 3)
matrix(unlist(simulation), byrow= F, ncol = 3)
matrix(unlist(simulation), byrow= T, ncol = 3)
simulation[[1]]
do.call(cbind, simulation[[1]])
do.call(cbind, simulation[[1]])[1,]
do.call(cbind, simulation[[1]])["tau.hat",]
do.call(cbind, simulation[[1]])[,1]
do.call(cbind, simulation[[1]])[,"tau.hat"]
?do.call
parReplicate <- function(cl, n, expr, simplify = T) {
ans <- parLapply(cl, integer(n),
eval.parent(substitute(function(...) expr)))
if (simplify) do.call(rbind, lapply(ans, do.call, what = cbind))
else ans
}
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 100 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 60 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau), simplify = F)
# Free up resources on your computer again
stopCluster(cl)
simulation
invisible(sapply(list.files(path.to.functions), source))
# Parallel Backend Setup
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 100 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 60 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau), simplify = F)
# Free up resources on your computer again
stopCluster(cl)
simulation
parReplicate
invisible(sapply(list.files(path.to.functions), source))
# Parallel Backend Setup
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 100 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 60 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
# Free up resources on your computer again
stopCluster(cl)
simulation
simulation[,1]
simulation
var(simulation$tau.hat)
var(simulation[,"tau.hat"])
mean(simluation[ ,"var.boot"])
mean(simulation[ ,"var.boot"])
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- 10000 # sample size in each iteration
alpha <- 2
tau <- 5})
n.sim <- 60 # number of times to simulate
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
var(simulation[ ,"tau.hat"])
mean(simulation[ ,"var.boot"])
# Free up resources on your computer again
stopCluster(cl)
simulation
var(simulation[ ,"tau.hat"]) - mean(simulation[ ,"var.boot"])
(var(simulation[ ,"tau.hat"]) - mean(simulation[ ,"var.boot"])) * (1 + 1/2) * 10000
exact.var.tau.hat <- 1/n1 + 3/2 * (n1 -1) * (n0 + 8/3) / n1 / (n0 + 1) / (n0 + 2)
n <- 10000
alpha <- 2
n0 <- round(n/(1+alpha))
n1 <- n - n0
exact.var.tau.hat <- 1/n1 + 3/2 * (n1 -1) * (n0 + 8/3) / n1 / (n0 + 1) / (n0 + 2)
exact.var.tau.hat
var(simulation[ ,"tau.hat"])
n1 * exact.var.tau.hat
1 + 3/2 * 2
hist(sqrt(n1) * (simulation[ ,"tau.hat"] - 5))
library(ggplot)
library(ggplot2)
ggplot(data.frame(x = sqrt(n1) * (simulation[ ,"tau.hat"] - 5))) + geom_histogram(aes(x = x))
ggplot(data.frame(x = sqrt(n1) * (simulation[ ,"tau.hat"] - 5))) + geom_histogram(aes(x = x), binwidth = 1)
ggplot(data.frame(x = sqrt(n1) * (simulation[ ,"tau.hat"] - 5))) + geom_histogram(aes(x = x), binwidth = 0.5)
n.sam <- 100
alpha <- 2
tau <- 5
n.sim <- 60
# Parallel Backend Setup
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP"))
clusterEvalQ(cl, {
library(RANN)
n.sam <- n.sam # sample size in each iteration
alpha <- alpha
tau <- tau})
# Simulation Call
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
# Free up resources on your computer again
stopCluster(cl)
?clusterEvalQ
?eval
?.globalEnv
??global environment
??global
?clusterExport
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP",
"n.sam",
"alpha",
"tau",
"nn2"))
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
stopCluster(cl)
simulation
# parameters to tweak
n.sam <- 100
alpha <- 2
tau <- 5
n.sim <- 60
# Parallel Backend Setup
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP",
"nn2", # nn2 from RANN package
"n.sam",
"alpha",
"tau"
)
)
# Simulation Call
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
# Free up resources on your computer again
stopCluster(cl)
var(simulation[ ,"tau.hat"])
n0 <- round(n/(1+alpha))
n1 <- n - n0
exact.var.tau.hat <- 1/n1 + 3/2 * (n1 -1) * (n0 + 8/3) / n1 / (n0 + 1) / (n0 + 2)
exact.var.tau.hat
mean(simulation[ ,"var.boot"])
var(simulation[ ,"tau.hat"]) - mean(simulation[ ,"var.boot"])
n1*(var(simulation[ ,"tau.hat"]) - mean(simulation[ ,"var.boot"]))
n1*(exact.var.tau.hat - mean(simulation[ ,"var.boot"]))
var(simulation[ ,"tau.hat"])
exact.var.tau.hat
mean(simulation[ ,"var.boot"])
# parameters to tweak
n.sam <- 100
alpha <- 2
tau <- 5
n.sim <- 6000
# Parallel Backend Setup
RNGkind("L'Ecuyer-CMRG") # So we actually have random data
n.cores <- detectCores() - 2
cl <- makeCluster(n.cores, type="SOCK")
clusterExport(cl=cl,
varlist = c("BootFindMatches",
"BootMatchedATE",
"Bootstrap",
"CalcBootstrapVar",
"CalcMatchedATE",
"DGPAbadieImbens",
"FindMatches",
"SimulateDGP",
"nn2", # nn2 from RANN package
"n.sam",
"alpha",
"tau"
)
)
# Simulation Call
simulation <- parReplicate(cl, n.sim,
SimulateDGP(DGPAbadieImbens, n.sam = n.sam, alpha = alpha, tau = tau))
# Free up resources on your computer again
stopCluster(cl)
simulation
var(simulation[ ,"tau.hat"])
n0 <- round(n/(1+alpha))
n1 <- n - n0
exact.var.tau.hat <- 1/n1 + 3/2 * (n1 -1) * (n0 + 8/3) / n1 / (n0 + 1) / (n0 + 2)
exact.var.tau.hat
mean(simulation[ ,"var.boot"])
n1*(var(simulation[ ,"tau.hat"]) - mean(simulation[ ,"var.boot"]))
n1*(exact.var.tau.hat - mean(simulation[ ,"var.boot"]))
sqrt(n1)*(var(simulation[ ,"tau.hat"]) - exact.var.tau.hat)
n1*var(simulation[ ,"tau.hat"])
n1*(exact.var.tau.hat - mean(simulation[ ,"var.boot"]))
simulation[ ,"var.boot"]
exact.var.tau.hat
n1* exact.var.tau.hat
n1*var(simulation[ ,"tau.hat"])
sqrt(n1)*var(simulation[ ,"tau.hat"])
sqrt(n1)*(var(simulation[ ,"tau.hat"]) - exact.var.tau.hat)
var(simulation[ ,"tau.hat"])
exact.var.tau.hat
sqrt(n1)*(var(simulation[ ,"tau.hat"])
)
mean(simulation[ ,"var.boot"])
n1*(exact.var.tau.hat - mean(simulation[ ,"var.boot"]))
sqrt(n1) * (simulation[ ,"tau.hat"]) - tau)
sqrt(n1) * (simulation[ ,"tau.hat"] - tau)
mean(scaled)
scaled <- sqrt(n1) * (simulation[ ,"tau.hat"] - tau)
mean(scaled)
var(scaled)
n
n1 <- n.sam - n0
var(scaled)
scaled <- sqrt(n1) * (simulation[ ,"tau.hat"] - tau)
mean(scaled)
mean(simulation[ ,"var.boot"])
n1 <- n.sam - n0
scaled <- sqrt(n1) * (simulation[ ,"tau.hat"] - tau)
var(simulation[ ,"tau.hat"])
n0 <- round(n.sam/(1+alpha))
n1 <- n.sam - n0
exact.var.tau.hat <- 1/n1 + 3/2 * (n1 -1) * (n0 + 8/3) / n1 / (n0 + 1) / (n0 + 2)
scaled <- sqrt(n1) * (simulation[ ,"tau.hat"] - tau)
mean(scaled)
mean(simulation[ ,"var.boot"])
var(scaled)
sqrt(n1)*(var(simulation[ ,"tau.hat"]))
n1*(exact.var.tau.hat - mean(simulation[ ,"var.boot"]))
scaled <- sqrt(n1) * (simulation[ ,"tau.hat"] - tau)
mean(scaled)
var(scaled)
stopCluster(cl)
